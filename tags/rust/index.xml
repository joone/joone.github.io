<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on posts</title>
    <link>/tags/rust/</link>
    <description>Recent content in Rust on posts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Aug 2018 13:15:00 -0700</lastBuildDate><atom:link href="/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux container for ChromeOS </title>
      <link>/post/chromeos-container-for-linux/</link>
      <pubDate>Wed, 29 Aug 2018 13:15:00 -0700</pubDate>
      
      <guid>/post/chromeos-container-for-linux/</guid>
      <description>Recently, ChromeOS started to support Linux applications on ChomeOS. Google hasn&amp;rsquo;t allowed ChromeOS to run native applications due to security reason. Finally, they found a way to support Linux application through the container technology.
It is worth to read a discussion on CrOSVM on Hacker News because the original author joined the discussion. Here is the article about ChromeOS Linux container.
https://www.zdnet.com/article/chrome-os-could-be-getting-containers-for-running-linux-vms/
There is a Youtube video:
https://www.youtube.com/watch?v=s9mrR2tqVbQ
Here is the readme about CrOSVM.</description>
    </item>
    
    <item>
      <title>Rust &amp; DRM</title>
      <link>/post/rust-drm/</link>
      <pubDate>Thu, 24 May 2018 16:06:00 -0700</pubDate>
      
      <guid>/post/rust-drm/</guid>
      <description>I was surprised that there are many low-level graphics projects written in Rust and I started looking into one of them: drm-rs. Then, I added an example for handling page-flip event.
drm-rs is a subproject of Smithay that is a wayland compositor written in Rust. It allows Rust applications to access the Direct Rendering Manger(DRM), a subsystem of the Linux Kernel. So, we could directly paint something into a frame buffer and render it on the display using DRM APIs.</description>
    </item>
    
  </channel>
</rss>
